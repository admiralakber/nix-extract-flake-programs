#+title: List programs/packages to be installed given a NixOS flake configuration
#+author: Aqeel Akber <aqeel@aqeelakber.com>
#+lastmod: [2024-11-20 Wed 00:01]

#+BEGIN_HTML
<div style="text-align: center;">
  <a href="https://img.shields.io/github/tag/admiralakber/nix-extract-flake-programs?color=%23ffb7c5&style=for-the-badge">
    <img src="https://img.shields.io/github/tag/admiralakber/nix-extract-flake-programs?color=%23ffb7c5&style=for-the-badge" alt="Latest Tag" style="margin: 5px;">
  </a>
  <a href="https://img.shields.io/badge/License-MIT-%23ff69b4?style=for-the-badge">
    <img src="https://img.shields.io/badge/License-MIT-%23ff69b4?style=for-the-badge" alt="License: MIT" style="margin: 5px;">
  </a>
  <a href="https://img.shields.io/github/stars/admiralakber/nix-extract-flake-programs?style=for-the-badge&color=%23ffc0cb">
    <img src="https://img.shields.io/github/stars/admiralakber/nix-extract-flake-programs?style=for-the-badge&color=%23ffc0cb" alt="GitHub Stars" style="margin: 5px;">
  </a>
  <a href="https://img.shields.io/badge/Flake-Ready-87CEEB?style=for-the-badge">
    <img src="https://img.shields.io/badge/Flake-Ready-87CEEB?style=for-the-badge" alt="Flake Ready" style="margin: 5px;">
  </a>
</div>
#+END_HTML

---

*nix-extract-flake-programs* is a tool to document and compare packages in Nix flakes. Simplify and organise your Nix configurations with ease!


* nix-extract-flake-programs üíÖ‚ú®üíª

=nix-extract-flake-programs= makes it simple to generate a list of installed packages‚Äîcomplete with versions‚Äîfrom your Nix flake configurations. Whether you‚Äôre documenting your current setup, comparing multiple configurations, or preparing for a migration, this script quickly produces clean, shareable output.

Say goodbye to manual comparisons and hello to structured, reproducible package documentation.

Try it out now:
#+BEGIN_SRC bash
nix run github:admiralakber/nix-extract-flake-programs -- -r https://github.com/admiralakber/nix-config -h discipline --stdout
#+END_SRC


---

* tl;dr üå∏
- Extracts package lists from =nixosConfigurations= and Home Manager.
- Works with any flake configuration, not just the installed one.
- Outputs a sorted Org-mode table for documentation or comparison.
- Now runnable directly with Nix flakes!
- Can even take a git repository as an input!

---

* Features üíï
- *System Packages*: Extracts from =nixosConfigurations.environment.systemPackages=.
- *Home Manager Packages*: Includes =home.packages= if configured.
- *Multi-config Support*: Query and compare any flake, not just your installed system.
- *Org-mode Ready*: Produces structured tables for seamless documentation.
- *Flake-ready*: Use directly from the repository with =nix run=.
- *Customisable*: Specify flake paths and hostnames for flexible use.

---

* Dependencies üì¶
This script requires the Nix package manager or NixOS to run. You can install Nix on most Linux distributions and macOS by following the instructions at [[https://nixos.org/download][nixos.org/download]].

** Required tools:
- =nix= (the Nix package manager)
- =jq= (JSON parsing utility)
- =emacs= (Used for Org-mode table formatting)

** Dependency Management:
The script uses a =nix-shell= shebang, ensuring all dependencies are installed in an isolated environment. No manual installation is required; the shebang fetches:
- =nix=
- =jq=
- =emacs=

This makes the script self-contained and easy to run on any system with Nix installed.

---

* Installation üíª
The script can now be used directly with Nix flakes. To build locally:

#+BEGIN_SRC bash
nix-build -o result default.nix
#+END_SRC

The script will be available at =result/bin/nix-extract-flake-programs=.

---

* Usage üéÄ

Run the script directly using flakes or from a local build. Here‚Äôs how:

** With Flakes
Run directly from the repository:
#+BEGIN_SRC bash
nix run github:admiralakber/nix-extract-flake-programs -- --help
#+END_SRC

** Local Build
Run from a locally built binary:
#+BEGIN_SRC bash
./result/bin/nix-extract-flake-programs --help
#+END_SRC

** Examples
Print the package table to stdout:
#+BEGIN_SRC bash
nix run github:admiralakber/nix-extract-flake-programs -- --stdout
#+END_SRC

Save the table to a file for documentation or sharing:
#+BEGIN_SRC bash
nix run github:admiralakber/nix-extract-flake-programs -- --output packages.org
#+END_SRC

Query a specific flake and hostname to compare configurations:
#+BEGIN_SRC bash
nix run github:admiralakber/nix-extract-flake-programs -- --flake /path/to/flake --hostname my-hostname
#+END_SRC

Specify a git repository directly and print to stdout:
#+BEGIN_SRC bash
nix run github:admiralakber/nix-extract-flake-programs -- -r https://github.com/admiralakber/nix-config -h discipline --stdout
#+END_SRC

Specify a branch from a different repo:
#+BEGIN_SRC
nix run github:admiralakber/nix-extract-flake-programs -- -r https://github.com/ryan4yin/nix-config -b i3-kickstarter -h nixos-test --stdout
#+END_SRC

---

* Example Output üíñ
Here‚Äôs what you get‚Äîuseful, structured, and ready to document:

#+BEGIN_EXAMPLE
| Package Name             | Version    |
|--------------------------|------------|
| git                      | 2.44.1     |
| vim                      | 9.1.0707   |
| emacs                    | 29.4       |
| curl                     | 8.7.1-bin  |
| sway                     | 1.9        |
#+END_EXAMPLE

---

* FAQ üå∑

*** Why use this?
I created this script to make it easy to see what‚Äôs in my system and quickly produce clean documentation for my Nix configurations. It‚Äôs great for auditing, comparing, or just keeping track of your setup. Curious about my setup? Check out my config here: [[https://github.com/admiralakber/nix-config][admiralakber/nix-config]].

*** Does it work outside of NixOS?
No, this is a NixOS-specific tool, and there‚Äôs no intention of expanding beyond that. If you‚Äôre not using NixOS, I highly recommend giving it a try. After 20+ years as a Linux daily driver, I can confidently say NixOS is what I‚Äôve always wanted for my system. If you‚Äôre new, [[https://github.com/admiralakber/nix-config][my config]] and [[https://github.com/ryan4yin/nix-config][ryan4yin‚Äôs config & documentation on flakes]] are great starting points.

*** What‚Äôs Org-mode?
It‚Äôs a plain-text markup format for organising and documenting information, commonly used in Emacs. Even if you don‚Äôt use Emacs, the tables work perfectly as structured plain text.

---

* Future Plans üåü
1) Add better handling for multi-host configurations to streamline fleet management.
2) Improve error handling for more robust output.
3) Keep it lightweight and focused‚Äîno unnecessary features or bloat.

---

* Suggestions ü™©
Have feedback, ideas, or just want to collaborate? Open an issue or send a pull request. Contributions are always welcome.

---

* Closing Thoughts ‚ú®
This script isn‚Äôt fancy‚Äîit‚Äôs practical and gets the job done. If it helps you document and compare your Nix setups, then it‚Äôs doing its job.

---

* Licence

Copyright 2024 Aqeel Akber <aqeel@aqeelakber.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
