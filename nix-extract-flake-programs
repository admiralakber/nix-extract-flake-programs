#! /usr/bin/env nix-shell
#! nix-shell -i bash -p nix jq emacs git

# Default values
FLAKE_PATH=""
HOSTNAME="$(hostname)"
PRINT_TO_STDOUT=0
OUTPUT_FILE=""
REPO_URL=""
BRANCH_OR_TAG=""
COMMIT=""

# Help message
show_help() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Extract installed packages from a NixOS flake and format them into an Org-mode table.

Options:
  -f, --flake PATH          Path to the flake.nix file (can be local directory or temporary from git repository)
  -r, --repo URL            Git repository URL containing the flake (clones to a temporary directory)
  -b, --branch BRANCH/TAG   Branch or tag to check out in the git repository (default: main branch)
  -c, --commit COMMIT_HASH  Specific commit to check out in the git repository
  -h, --hostname HOSTNAME   Hostname for nixosConfigurations (default: system hostname)
  -o, --output FILE         Output file path (default: temporary file)
  --stdout                  Print the Org table to stdout instead of saving to a file
  --help                    Show this help message and exit

Examples:
  $(basename "$0") --flake /path/to/flake --hostname my-hostname
  $(basename "$0") -r https://github.com/user/repo.git -b main -h my-hostname -o packages.org
  $(basename "$0") --stdout
  $(basename "$0") -r https://github.com/user/repo.git -c abcd123 -h my-hostname
EOF
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--flake)
            FLAKE_PATH="$2"
            shift 2
            ;;
        -r|--repo)
            REPO_URL="$2"
            shift 2
            ;;
        -b|--branch)
            BRANCH_OR_TAG="$2"
            shift 2
            ;;
        -c|--commit)
            COMMIT="$2"
            shift 2
            ;;
        -h|--hostname)
            HOSTNAME="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --stdout)
            PRINT_TO_STDOUT=1
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Clone the repository if a repo URL is provided
if [[ -n "$REPO_URL" ]]; then
    TEMP_DIR=$(mktemp -d)
    echo "Cloning repository from $REPO_URL to $TEMP_DIR..."

    if [[ -n "$BRANCH_OR_TAG" ]]; then
        # Clone specific branch or tag
        git clone --branch "$BRANCH_OR_TAG" --single-branch "$REPO_URL" "$TEMP_DIR" || { echo "Error: Failed to clone repository"; exit 1; }
    else
        # Shallow clone to save time and space
        git clone --depth 1 "$REPO_URL" "$TEMP_DIR" || { echo "Error: Failed to clone repository"; exit 1; }
    fi

    # Check out a specific commit if provided
    if [[ -n "$COMMIT" ]]; then
        cd "$TEMP_DIR" || { echo "Error: Failed to change directory to $TEMP_DIR"; exit 1; }
        git checkout "$COMMIT" || { echo "Error: Failed to checkout commit $COMMIT"; exit 1; }
    fi

    FLAKE_PATH="$TEMP_DIR"
fi

# Validate the flake path
if [[ -z "$FLAKE_PATH" ]]; then
    echo "Error: No flake path provided. Use -f or -r options to specify a flake."
    show_help
    exit 1
fi

# Ensure the flake is accessible
if [[ ! -f "$FLAKE_PATH/flake.nix" ]]; then
    echo "Error: flake.nix not found in $FLAKE_PATH"
    exit 1
fi

# Use an associative array to track unique entries
declare -A seen_packages

# Create a temporary file for the Org table if no output file is specified
if [[ -z "$OUTPUT_FILE" ]]; then
    OUTPUT_FILE=$(mktemp /tmp/programs-table.XXXXXX.org)
fi

# Parse and write the Org table to the temporary file
(
    echo "| Package Name             | Version    |"
    echo "|--------------------------|------------|"

    # Function to process packages
    process_packages() {
        while read -r line; do
            # Extract package name and version, removing hash prefixes
            if [[ "$line" =~ ([^/]+)-([0-9][^/]+)$ ]]; then
                package="${BASH_REMATCH[1]}"
                version="${BASH_REMATCH[2]}"
                clean_package=$(echo "$package" | sed -E 's/^[a-z0-9]+-//; s/-bin$//')

                # Deduplicate by checking the associative array
                key="$clean_package:$version"
                if [[ -z "${seen_packages[$key]}" ]]; then
                    seen_packages["$key"]=1
                    printf "| %-24s | %-10s |\n" "$clean_package" "$version"
                fi
            fi
        done
    }

    # Evaluate system packages
    nix eval "$FLAKE_PATH#nixosConfigurations.$HOSTNAME.config.environment.systemPackages" --json \
        | jq -r '.[] | select(type == "string" or type == "object")' | process_packages

    # Evaluate home-manager packages (optional)
    nix eval "$FLAKE_PATH#homeConfigurations.$HOSTNAME.config.home.packages" --json \
        | jq -r '.[] | select(type == "string" or type == "object")' | process_packages

) > "$OUTPUT_FILE"

# Sort and process output using Emacs
SORT_COLUMN=1  # You can change this to specify which column to sort by (1 for package name, 2 for version)
emacs --quick --batch "$OUTPUT_FILE" \
    --eval "(progn
              (setq make-backup-files nil)
              (org-mode)
              (org-table-align)
              (goto-char (point-min))
              (forward-line 2) ;; Move to the start of the table data (skipping header rows)
              (org-table-sort-lines nil ?a) ;; Sort alphabetically by the first column
              (save-buffer))"

# Handle output based on options
if [[ $PRINT_TO_STDOUT -eq 1 ]]; then
    # Process table in Emacs and output to stdout
    emacs --quick --batch "$OUTPUT_FILE" \
        --eval "(progn (setq make-backup-files nil) (org-mode) (org-table-align) (princ (buffer-string)))"
else
    # Inform the user where the file is saved
    echo "Org table processed and saved at: $OUTPUT_FILE"
fi

# Cleanup
if [[ -n "$REPO_URL" ]]; then
    rm -rf "$TEMP_DIR"
fi
